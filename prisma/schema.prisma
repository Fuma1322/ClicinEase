generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  USER
  ADMIN
  DOCTOR
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String         @default("slug")
  email         String         @unique
  phone         String
  emailVerified DateTime?
  image         String?
  role          UserRole       @default(USER)
  password      String
  accounts      Account[]
  sessions      Session[]
  symptomsIds   String[]
  doctorProfile DoctorProfile?

  isVerified Boolean @default(false)
  token      Int

  specialityId String?     @db.ObjectId
  speciality   Speciality? @relation(fields: [specialityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  serviceId String?  @db.ObjectId
  service   Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  doctorProfileId String        @unique @db.ObjectId
  doctorProfile   DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday          String[]
  tuesday         String[]
  wednesday       String[]
  thursday        String[]
  friday          String[]
  saturday        String[]
  sunday          String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  doctors        User[]
  title          String
  slug           String          @unique
  imageUrl       String
  doctorProfiles DoctorProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AppointmentStatus {
  pending
  rejected
  approved
}

model Appointment {
  id                       String    @id @default(auto()) @map("_id") @db.ObjectId
  appointmentDate          DateTime?
  appointmentFormattedDate String
  doctorId                 String
  patientId                String
  charge                   Int
  appointmentTime          String?

  firstName         String
  lastName          String?
  gender            String?
  phone             String?
  email             String?
  dob               DateTime?
  location          String?
  appointmentReason String?
  medicalDocuments  String[]
  occupation        String?
  status            AppointmentStatus @default(pending)
  meetingLink       String            @default("")
  meetingProvider   String            @default("zoom")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Speciality {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  doctors        User[]
  title          String
  slug           String          @unique
  doctorProfiles DoctorProfile[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Symptom {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug  String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DoctorProfile {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  trackingNumber String    @unique
  firstName      String
  lastName       String
  middleName     String?
  dob            DateTime?
  gender         String

  bio                  String?
  page                 String
  medicalLicense       String?
  availability         Availability?
  profilePicture       String?
  yearsOfExperience    Int?
  medicalLicenseExpiry DateTime?

  email   String?
  phone   String?
  country String?
  city    String?
  state   String?

  medicalSchool         String?
  graduationYear        String?
  primarySpecialization String?
  otherSpecialities     String[]
  docCertificates       String[]

  organizationName             String?
  organizationAddress          String?
  organizationContactNumber    String?
  organizationEmailAddress     String?
  organizationWebsite          String?
  organizationHoursOfOperarion String?
  servicesOffered              String[]
  insuranceAccepted            String?

  educationHistory String?
  research         String?
  accomplishments  String?
  additionalDocs   String[]
  operationMode    String?  @default("Telehealth visit")
  hourlyWage       Int      @default(100)

  specialityId String?     @db.ObjectId
  speciality   Speciality? @relation(fields: [specialityId], references: [id])

  serviceId  String?  @db.ObjectId
  service    Service? @relation(fields: [serviceId], references: [id])
  symptomIds String[] @db.ObjectId

  availabilityId String? @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
