generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
enum UserRole {
  USER
  ADMIN
  DOCTOR
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String @default("slug")
  email         String   @unique
  phone         String
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  password      String
  accounts      Account[]
  sessions      Session[]
  symptomsIds   String[]
  doctorProfile DoctorProfile?
  isVerified    Boolean   @default(false)
  token         Int
  specialityId         String?   @db.ObjectId
  speciality           Speciality? @relation(fields: [specialityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId         String?   @db.ObjectId
  service           Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
model Availability {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  doctorProfileId         String   @db.ObjectId @unique
  doctorProfile           DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday        String[]
  tuesday       String[]
  wednesday     String[]
  thursday      String[]
  friday        String[]
  saturday      String[]
  sunday        String[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 model Service {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  doctors        User[]
  title         String
  slug          String @unique
  imageUrl      String
  doctorProfile DoctorProfile[]
 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum AppointmentStatus {
  pending
  rejected
  approved
}
model Appointment {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  appointmentDate DateTime?
  appointmentFormattedDate String
  doctorId String?
  patientId  String?
  charge Int
  appointmentTime: String?

  firstName  string;
  lastName  String?
  gender String?
  phone String?
  email String?
  dob DateTime?
  location string?
  appointmentReason String?
  medicalDocuments String[]
  occupation String?
  status  AppointmentStatus @default(pending)
  meetingLink String @default("")
  meetingProvider String @default("zoom")


  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}
 model Speciality {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  doctor        User[]
  title         String[]
  slug          String @unique
  doctorProfile DoctorProfile[]
 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

 model Symptom {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String[]
  slug          String @unique
 

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model DoctorProfile {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String   @unique @db.ObjectId
  user          User     @relation(fields: [userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  firstName     String
  lastName      String
  middleName    String?
  dob           DateTime?
  gender        String  
  page          String 
  bio            String?
  trackingNumber String @unique 
  profilePicture String?
  availability   Availability?
  medicalLicense String?
  medicalLicenseExpiry DateTime?
  yearsOfExperience Int?

  email           String?
  phone           String?
  country         String?
  city            String?
  state           String?
  medicalSchool   String?
  graduationYear  String?
  primarySpecialization String?
  otherSpecialties      String[]
  boardCertificates     String[]
  hospitalName          String?
  hospitalAddress       String?
  hospitalContactNumber String?
  hospitalEmailAddress  String?
  hospitalWebsite       String?
  hospitalHoursOfOperation  String?
  insuranceAccepted         String?
  servicesOffered String[]
  educationHistory      String?
  research              String?
  accomplishments       String?
  operationMode          String? @default("Telehealth visit")
  hourlyWage            Int @default(100)

  specialityId         String?   @db.ObjectId
  speciality           Speciality? @relation(fields: [specialityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  serviceId         String?   @db.ObjectId
  service           Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  

 
   
  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
} 
 
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String    @unique
  imageUrl    String?
  demoLink    String?
  description String?
  products    Product[]
 
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
 
model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String   @unique
  price         Float?
  qty           Int?
  imageUrl      String?
  productImages String[]
  features String[]
  description   String?
  categoryId    String   @db.ObjectId
  category      Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
 
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}